buildscript {
	ext {
		grailsVersion = project.grailsVersion
	}
	repositories {
		mavenLocal()
		maven { url 'https://repo.grails.org/grails/core' }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsVersion"
		classpath "org.grails:grails-docs:$grailsVersion"
	}
}

plugins {
	id 'io.spring.dependency-management' version '0.5.2.RELEASE'
	id 'com.jfrog.bintray' version '1.2'
}

version '3.0.0.M1'
group 'org.grails.plugins'

apply plugin: 'maven-publish'
apply plugin: 'spring-boot'
apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.grails.grails-doc'

apply from: 'https://raw.githubusercontent.com/grails/grails-profile-repository/master/profiles/plugin/templates/grailsCentralPublishing.gradle'
apply from: 'https://raw.githubusercontent.com/grails/grails-profile-repository/master/profiles/plugin/templates/bintrayPublishing.gradle'

ext {
	grailsVersion = project.grailsVersion
	gradleWrapperVersion = project.gradleWrapperVersion
}

sourceCompatibility = targetCompatibility = 1.7

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'https://repo.grails.org/grails/core' }
}

dependencyManagement {
	imports {
		mavenBom "org.grails:grails-bom:$grailsVersion"
	}
	applyMavenExclusions false
}

dependencies {
	provided 'javax.servlet:javax.servlet-api:3.1.0'
	provided 'org.grails:grails-dependencies'
	provided 'org.grails:grails-web-boot'

	compile 'org.grails.plugins:spring-security-core:3.0.0.M1'

	String springSecurityVersion = '3.2.8.RELEASE'

	compile "org.springframework.security:spring-security-ldap:$springSecurityVersion", {
		['apacheds-core', 'apacheds-core-entry', 'apacheds-protocol-ldap', 'apacheds-protocol-shared',
		 'apacheds-server-jndi', 'commons-logging', 'fest-assert', 'jcl-over-slf4j', 'junit',
		 'ldapsdk', 'logback-classic', 'mockito-core', 'shared-ldap', 'slf4j-api', 'spring-beans',
		 'spring-context', 'spring-core', 'spring-ldap-core', 'spring-security-core',
		 'spring-test', 'spring-tx'].each { exclude module: it }
	}

	compile 'org.slf4j:slf4j-api:1.7.12'

	compile 'org.springframework.ldap:spring-ldap-core:2.0.2.RELEASE', {
		['commons-lang', 'gsbase', 'junit', 'mockito-core', 'powermock-api-mockito',
		 'powermock-api-support', 'powermock-core', 'powermock-module-junit4',
		 'powermock-module-junit4-common', 'powermock-reflect', 'slf4j-log4j12', 'spring-beans',
		 'spring-core', 'spring-data-commons', 'spring-test', 'spring-tx'].each { exclude module: it }
	}

	console 'org.grails:grails-console'

	testCompile 'org.grails:grails-plugin-testing'
}

docs.doLast {

	// can't do this in custom css because the order doesn't support overriding, only adding
	File mainCss = new File(project.buildDir, 'docs/manual/css/main.css')
	mainCss.text = mainCss.text.replaceAll('font-size: 85%', 'font-size: 100%;')

	// delete unused images
	['pivotal-logo-color', 'pivotal-logo', 'springsource-logo', 'grails-icon', 'grails', 'groovy'].each { String name ->
		assert new File(project.buildDir, 'docs/manual/img/' + name + '.png').delete()
	}
	assert new File(project.buildDir, 'docs/manual/img/favicon.ico').delete()
}

task docsWithPdf(dependsOn: 'docs') << {
	// based on grails.doc.gradle.PublishPdf
	def outputDir = new File(project.buildDir, 'docs/manual')
	def htmlFile = new File(outputDir, 'guide/single.html')
	def pdfBuilder = new grails.doc.PdfBuilder()
	def xml = pdfBuilder.createXml(htmlFile, outputDir.absolutePath)
	pdfBuilder.createPdf xml, new File(htmlFile.parentFile, 'single.pdf'), htmlFile
}

task wrapper(type: Wrapper) {
	gradleVersion = gradleWrapperVersion
}
